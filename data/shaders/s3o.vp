!!ARBvp1.0
PARAM projection[4] = { state.matrix.projection };
PARAM modelView[4] = { state.matrix.modelview };
PARAM mvproj[4] = { state.matrix.mvp };
PARAM mvInvTrans[4] = { state.matrix.modelview.invtrans };
PARAM eyeVec = { 0,1,0 };
OUTPUT oPos = result.position;
TEMP dots, tmp, vsPos, vsNormal, lightDir;

# Transform the vertex to view space
DP4 vsPos.x, modelView[0], vertex.position;
DP4 vsPos.y, modelView[1], vertex.position;
DP4 vsPos.z, modelView[2], vertex.position;
DP4 vsPos.w, modelView[3], vertex.position;

# Transform the view space position to clip space
DP4 oPos.x, projection[0], vsPos;
DP4 oPos.y, projection[1], vsPos;
DP4 oPos.z, projection[2], vsPos;
DP4 oPos.w, projection[3], vsPos;

# Transform the normal to view space
DP3 vsNormal.x, mvInvTrans[0], vertex.normal;
DP3 vsNormal.y, mvInvTrans[1], vertex.normal;
DP3 vsNormal.z, mvInvTrans[2], vertex.normal;

MOV result.texcoord[0], vertex.texcoord[0];

# Calculate normalized light dir (positional light)
SUB tmp, state.light[0].position, vsPos;
DP3 tmp.w, tmp, tmp;
RSQ tmp.w, tmp.w;
MUL lightDir, tmp.w, tmp;

# Calculate normalized reflection vector (2 * (N dot L) * N - L)
DP3 tmp, vsNormal, lightDir;
MUL tmp, vsNormal, tmp;
MAD tmp, {2,2,2,2}, tmp, -lightDir;
DP3 tmp.w, tmp, tmp;
RSQ tmp.w, tmp.w;
MUL result.texcoord[1], tmp.w, tmp;

# Calculate diffuse component 
DP3 dots.x, lightDir, vsNormal;

# Calculate specular component and compute lighting coefficients
DP3 dots.y, state.light[0].half, vertex.normal;
MOV dots.w, state.material.shininess.x;
LIT dots, dots;

# Accumulate diffuse component
MAD result.color.primary, dots.y, state.lightprod[0].diffuse, state.lightprod[0].ambient;

# Accumulate specular component
MUL result.color.secondary, dots.z, state.lightprod[0].specular;

END