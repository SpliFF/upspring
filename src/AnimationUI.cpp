// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "AnimationUI.h"

inline void IK_UI::cb_Fixed_i(fltk::Item*, void*) {
  JointType(IKJT_Fixed);
}
void IK_UI::cb_Fixed(fltk::Item* o, void* v) {
  ((IK_UI*)(o->parent()->parent()->user_data()))->cb_Fixed_i(o,v);
}

inline void IK_UI::cb_Hinge_i(fltk::Item*, void*) {
  JointType(IKJT_Hinge);
}
void IK_UI::cb_Hinge(fltk::Item* o, void* v) {
  ((IK_UI*)(o->parent()->parent()->user_data()))->cb_Hinge_i(o,v);
}

inline void IK_UI::cb_Universal_i(fltk::Item*, void*) {
  JointType(IKJT_Universal);
}
void IK_UI::cb_Universal(fltk::Item* o, void* v) {
  ((IK_UI*)(o->parent()->parent()->user_data()))->cb_Universal_i(o,v);
}

fltk::Window* IK_UI::CreateUI() {
  fltk::Window* w;
   {fltk::Window* o = window = new fltk::Window(155, 138, "IK");
    w = o;
    o->user_data((void*)(this));
    o->begin();
     {fltk::Choice* o = selJointType = new fltk::Choice(6, 24, 143, 19, "Joint Constraint Type");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->begin();
       {fltk::Item* o = new fltk::Item("Fixed");
        o->callback((fltk::Callback*)cb_Fixed);
      }
       {fltk::Item* o = new fltk::Item("Hinge");
        o->callback((fltk::Callback*)cb_Hinge);
      }
       {fltk::Item* o = new fltk::Item("Universal");
        o->callback((fltk::Callback*)cb_Universal);
      }
      o->end();
    }
    o->end();
  }
  return  w;
}

inline void TimelineUI::cb_timeSlider_i(fltk::ValueSlider*, void*) {
  SliderCallback();
}
void TimelineUI::cb_timeSlider(fltk::ValueSlider* o, void* v) {
  ((TimelineUI*)(o->parent()->user_data()))->cb_timeSlider_i(o,v);
}

inline void TimelineUI::cb_Set_i(fltk::Button*, void*) {
  cmdSetLength();
}
void TimelineUI::cb_Set(fltk::Button* o, void* v) {
  ((TimelineUI*)(o->parent()->user_data()))->cb_Set_i(o,v);
}

inline void TimelineUI::cb_playstopButton_i(fltk::Button*, void*) {
  cmdPlayStop();
}
void TimelineUI::cb_playstopButton(fltk::Button* o, void* v) {
  ((TimelineUI*)(o->parent()->user_data()))->cb_playstopButton_i(o,v);
}

inline void TimelineUI::cb_Pause_i(fltk::Button*, void*) {
  cmdPause();
}
void TimelineUI::cb_Pause(fltk::Button* o, void* v) {
  ((TimelineUI*)(o->parent()->user_data()))->cb_Pause_i(o,v);
}

inline void TimelineUI::cb_Insert_i(fltk::Button*, void*) {
  InsertKeys();
}
void TimelineUI::cb_Insert(fltk::Button* o, void* v) {
  ((TimelineUI*)(o->parent()->user_data()))->cb_Insert_i(o,v);
}

fltk::Window* TimelineUI::CreateUI() {
  fltk::Window* w;
   {fltk::Window* o = window = new fltk::Window(563, 67, "Timeline");
    w = o;
    o->textfont(fltk::SCREEN_FONT);
    o->user_data((void*)(this));
    o->begin();
     {fltk::ValueSlider* o = timeSlider = new fltk::ValueSlider(2, 4, 554, 29);
      o->type(fltk::ValueSlider::TICK_BELOW);
      o->textfont(fltk::COURIER);
      o->textsize(12);
      o->maximum(10);
      o->callback((fltk::Callback*)cb_timeSlider);
      o->when(fltk::WHEN_CHANGED);
    }
     {fltk::Button* o = new fltk::Button(121, 38, 67, 25, "Set length");
      o->callback((fltk::Callback*)cb_Set);
    }
     {fltk::Button* o = playstopButton = new fltk::Button(2, 38, 52, 25, "Play");
      o->callback((fltk::Callback*)cb_playstopButton);
    }
     {fltk::Button* o = new fltk::Button(59, 38, 56, 25, "Pause");
      o->callback((fltk::Callback*)cb_Pause);
    }
    autoKeying = new fltk::CheckButton(195, 38, 108, 25, "Auto key insert");
     {fltk::Button* o = new fltk::Button(315, 38, 79, 25, "Insert keys");
      o->callback((fltk::Callback*)cb_Insert);
    }
    o->end();
    o->set_non_modal();
  }
  return  w;
}

inline void AnimTrackEditorUI::cb_Auto_i(fltk::Button*, void*) {
  cmdAutoFitView();
}
void AnimTrackEditorUI::cb_Auto(fltk::Button* o, void* v) {
  ((AnimTrackEditorUI*)(o->parent()->parent()->user_data()))->cb_Auto_i(o,v);
}

inline void AnimTrackEditorUI::cb_Delete_i(fltk::Button*, void*) {
  cmdDeleteKeys();
}
void AnimTrackEditorUI::cb_Delete(fltk::Button* o, void* v) {
  ((AnimTrackEditorUI*)(o->parent()->parent()->user_data()))->cb_Delete_i(o,v);
}

inline void AnimTrackEditorUI::cb_Move_i(fltk::CheckButton*, void*) {
  toggleMoveView();
}
void AnimTrackEditorUI::cb_Move(fltk::CheckButton* o, void* v) {
  ((AnimTrackEditorUI*)(o->parent()->parent()->user_data()))->cb_Move_i(o,v);
}

inline void AnimTrackEditorUI::cb_Auto1_i(fltk::Button*, void*) {
  cmdAutoFitTime();
}
void AnimTrackEditorUI::cb_Auto1(fltk::Button* o, void* v) {
  ((AnimTrackEditorUI*)(o->parent()->parent()->user_data()))->cb_Auto1_i(o,v);
}

fltk::Window* AnimTrackEditorUI::CreateUI() {
  fltk::Window* w;
   {fltk::Window* o = window = new fltk::Window(605, 310, "Animation Track Editor");
    w = o;
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 605, 287);
      o->begin();
       {AnimKeyTrackView* o = trackView = new AnimKeyTrackView(200, 0, 405, 287);
        o->box(fltk::THIN_DOWN_BOX);
        fltk::Group::current()->resizable(o);
      }
       {fltk::MultiBrowser* o = propBrowser = new fltk::MultiBrowser(0, 0, 200, 287);
        o->type(fltk::MultiBrowser::MULTI);
        o->set_vertical();
      }
      o->end();
      fltk::Group::current()->resizable(o);
    }
     {fltk::Group* o = new fltk::Group(-1, 288, 606, 22);
      o->begin();
       {fltk::Button* o = new fltk::Button(140, 0, 85, 22, "Auto fit Y-axis");
        o->callback((fltk::Callback*)cb_Auto);
      }
       {fltk::Button* o = new fltk::Button(314, 0, 93, 22, "Delete keys");
        o->callback((fltk::Callback*)cb_Delete);
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(514, 0, 69, 22);
        fltk::Group::current()->resizable(o);
      }
       {fltk::CheckButton* o = new fltk::CheckButton(411, 0, 89, 21, "Move view");
        o->callback((fltk::Callback*)cb_Move);
      }
       {fltk::Button* o = new fltk::Button(227, 0, 84, 22, "Auto fit time");
        o->callback((fltk::Callback*)cb_Auto1);
      }
      chkLockObjects = new fltk::CheckButton(1, 0, 135, 21, "Lock objects");
      o->end();
    }
    o->end();
  }
  return  w;
}
