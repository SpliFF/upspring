# data file for the FLTK User Interface Designer (FLUID)
version 2.0100 
header_name {../fltk/FileChooser.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
comment {//
// "$Id: FileChooser.fl 6074 2008-03-20 16:32:46Z fabien $"
//
// FileChooser dialog for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2006 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//} {in_source in_header
} 

decl {\#include <fltk/draw.h>} {} 

decl {\#include <fltk/run.h>} {} 

decl {\#include <fltk/Cursor.h>} {} 

namespace fltk {open
} {
  class FL_API FileChooser {open
  } {
    decl {enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 };} {public
    }
    decl {static fltk::Preferences prefs_;} {}
    decl {void (*callback_)(FileChooser*, void *);} {}
    decl {void *data_;} {}
    decl {char directory_[1024];} {}
    decl {char pattern_[1024];} {}
    decl {char preview_text_[2048];} {}
    decl {int type_;} {}
    decl {void favoritesButtonCB();} {}
    decl {void favoritesCB(fltk::Widget *w);} {}
    decl {void fileListCB();} {}
    decl {void fileNameCB();} {}
    decl {void newdir();} {}
    decl {static void previewCB(FileChooser *fc);} {}
    decl {void showChoiceCB();} {}
    decl {void update_favorites();} {}
    decl {void update_preview();} {}
    decl {int favorites_showing;} {}
    Function {FileChooser(const char *d, const char *p, int t, const char *title)} {open
    } {
      {fltk::Window} window {
        label {Choose File}
        callback {fileName->text("");
fileList->deselect();
fltk::remove_timeout((TimeoutHandler)previewCB, this);
window->hide();} open
        private xywh {487 246 490 380} type Double resizable
        extra_code {if (title) window->label(title);
\#include <stdio.h>
\#include <stdlib.h>
\#include <string.h>} modal visible
      } {
        {fltk::Group} {} {open
          private xywh {65 10 415 25}
        } {
          {fltk::Choice} showChoice {
            label {Show:}
            callback {showChoiceCB();} open
            private xywh {0 0 215 25} resizable labelfont 1
            extra_code {showChoice->label(show_label);}
          } {}
          {fltk::PopupMenu} favoritesButton {
            label Favorites
            callback {favoritesButtonCB();} open
            private xywh {225 0 155 25} align 48
            extra_code {favoritesButton->label(favorites_label);
favorites_showing = 1;}
          } {}
          {fltk::Button} newButton {
            callback {newdir();}
            xywh {390 0 25 25}
            image not_inlined {./new.xbm} labelsize 8
            extra_code {\#include <fltk/Preferences.h>
o->tooltip(new_directory_tooltip);}
          }
        }
        {fltk::TiledGroup} {} {
          callback {update_preview();} open
          private xywh {10 45 470 225} resizable
          extra_code {//window->resizable(o);}
        } {
          {fltk::FileBrowser} fileList {
            callback {fileListCB();}
            private xywh {0 0 295 225} type Single hotspot labelsize 14
            extra_code {\#include <fltk/FileBrowser.h>
            fileList->type(0);fileList->when(fltk::WHEN_CHANGED);}
          }
          {fltk::InvisibleBox} previewBox {
            label {?}
            private xywh {295 0 175 225} align 80 box DOWN_BOX labelsize 100
          }
        }
        {fltk::Group} {} {open
          private xywh {10 275 470 99}
        } {
          {fltk::Group} {} {open
            private xywh {0 0 470 40}
          } {
            {fltk::CheckButton} previewButton {
              label Preview
              callback {preview(previewButton->value());}
              xywh {0 0 73 20} shortcut 0x80070 value 1
              extra_code {previewButton->label(preview_label);}
            }
            {fltk::CheckButton} showHiddenButton {
              label {Show &Hidden}
              callback {fileList->show_hidden(showHiddenButton->value() ? true: false);
  			fileList->load(fileList->directory());}
              xywh {80 0 100 20} shortcut 0x80070 value 1
              extra_code {o->value(fileList->show_hidden() ? 1 : 0);}
            }
            {fltk::InvisibleBox} {} {
              private xywh {180 0 290 20}
            }
          }
          {fltk::FileInput} fileName {
            callback {fileNameCB();}
            private xywh {105 25 365 35} when ENTER_KEY labelfont 1 labelsize 14 textsize 14
            extra_code {fileName->when(fltk::WHEN_CHANGED | fltk::WHEN_ENTER_KEY_ALWAYS);}
          }
          {fltk::InvisibleBox} {} {
            label Filename
            private xywh {0 35 95 25} align 56 labelfont 1
            extra_code {o->label(filename_label);}
          }
          {fltk::Group} {} {open
            private xywh {0 70 470 29}
          } {
            {fltk::ReturnButton} okButton {
              label OK
              callback {// Do any callback that is registered...
if (callback_)
  (*callback_)(this, data_);

window->hide();} selected
              private xywh {315 0 73 25} shortcut 0xff0d
              extra_code {\#include <fltk/ask.h>
okButton->label("Ok");}
            }
            {fltk::Button} cancelButton {
              label Cancel
              callback {fileName->text("");
fileList->deselect();
fltk::remove_timeout((TimeoutHandler)previewCB, this);
window->hide();}
              private xywh {398 0 72 25}
              extra_code {o->label("Cancel");}
            }
          }
        }
      }
      {fltk::Window} favWindow {
        label {Manage Favorites} open
        private xywh {440 69 355 150} type Double resizable
        extra_code {favWindow->label(manage_favorites_label);
favWindow->resizable(fileList);
o->shortcut(0xff1b);} modal visible
      } {
        {fltk::FileBrowser} favList {
          callback {favoritesCB(favList);}
          private xywh {10 10 300 95} type Single when CHANGED
	   extra_code {o->type(0);}
        } {fltk::Group} {} {open
          xywh {320 10 25 95}
          extra_code {o->resizable(0);}
        } {
          {fltk::Button} favUpButton {
            label {@8>}
            callback {favoritesCB(favUpButton);}
            private xywh {0 0 25 25}
          }
          {fltk::Button} favDeleteButton {
            label X
            callback {favoritesCB(favDeleteButton);}
            private xywh {0 35 25 25} resizable labelfont 1
          }
          {fltk::Button} favDownButton {
            label {@2>}
            callback {favoritesCB(favDownButton);}
            private xywh {0 70 25 25}
          }
        }
        {fltk::Group} {} {open
          xywh {0 113 355 37}
          extra_code {o->resizable(0);}
        } {
          {fltk::Button} favCancelButton {
            label Cancel
            callback {favWindow->hide();}
            private xywh {272 2 72 25}
            extra_code {favCancelButton->label("Cancel");}
          }
          {fltk::ReturnButton} favOkButton {
            label Save
            callback {favoritesCB(favOkButton);}
            private xywh {180 2 79 25} shortcut 0xff0d
            extra_code {\#include <fltk/ask.h>
favOkButton->label(save_label);}
          }
          {fltk::InvisibleBox} {} {
            xywh {0 2 175 25} resizable
          }
        }
      }
      code {callback_ = 0;
data_ = 0;
directory_[0] = 0;
window->size_range(window->w(), window->h(), 0, 0);
type(t);
filter(p);
update_favorites();
value(d);
type(t);
int e;
prefs_.get("preview", e, 1);
preview(e);} {}
    }
    Function {~FileChooser()} {} {
      code {fltk::remove_timeout((TimeoutHandler)previewCB, this);
delete window;
delete favWindow;} {}
    }
    Function {callback(void (*cb)(FileChooser *, void *), void *d = 0)} {return_type void
    } {
      code {callback_ = cb;
data_     = d;} {}
    }
    Function {color(Color c)} {} {
      code {fileList->color(c);} {}
    }
    Function {color()} {return_type Color
    } {
      code {return (fileList->color());} {}
    }
    decl {int count();} {public
    }
    decl {void directory(const char *d);} {public
    }
    Function {directory()} {return_type {char *}
    } {
      code {return directory_;} {}
    }
    decl {void filter(const char *p);} {public
    }
    Function {filter()} {return_type {const char *}
    } {
      code {return (fileList->filter());} {}
    }
    Function {filter_value()} {return_type int
    } {
      code {return showChoice->value();} {}
    }
    Function {filter_value(int f)} {return_type void
    } {
      code {showChoice->value(f);
showChoiceCB();} {}
    }
    Function {hide()} {return_type void
    } {
      code {window->hide();} {}
    }
    Function {icon_size(uchar s)} {return_type void
    } {
      code {fileList->icon_size(s);} {}
    }
    Function {icon_size()} {return_type uchar
    } {
      code {return ((uchar) fileList->icon_size());} {}
    }
    Function {label(const char *l)} {return_type void
    } {
      code {window->label(l);} {}
    }
    Function {label()} {return_type {const char *}
    } {
      code {return (window->label());} {}
    }
    Function {ok_label(const char *l)} {return_type void
    } {
      code {okButton->label(l);
int w=0, h=0;
okButton->measure_label(w, h);
w+=70;
okButton->resize(cancelButton->x()- w, cancelButton->y(),w-10, 25);
okButton->parent()->init_sizes();} {}
    }
    Function {ok_label()} {return_type {const char *}
    } {
      code {return (okButton->label());} {}
    }
    decl {void preview(int e);} {public
    }
    decl {int preview() const { return previewButton->value(); }} {public
    }
    decl {void rescan();} {public
    }
    Function {show()} {return_type void
    } {
      code {window->hotspot(fileList);
window->show();
fltk::flush();
fltk::cursor(fltk::CURSOR_WAIT);
rescan();
fltk::cursor(fltk::CURSOR_DEFAULT);
fileName->take_focus();} {}
    }
    Function {show(int x, int y)} {open return_type void
    } {
      code {window->show();
window->resize(x, y,window->w(),window->h());
fltk::flush();
fltk::cursor(fltk::CURSOR_WAIT);
rescan();
fltk::cursor(fltk::CURSOR_DEFAULT);
fileName->take_focus();} {}
    }
    Function {exec(Window* p, bool grab)} {return_type bool
    } {
      code {if (shown()) window->hide();return window->exec(p, grab);} {}
    }
    Function {shown()} {open return_type int
    } {
      code {return window->shown();} {}
    }
    Function {textcolor(Color c)} {return_type void
    } {
      code {fileList->textcolor(c);} {}
    }
    Function {textcolor()} {return_type Color
    } {
      code {return (fileList->textcolor());} {}
    }
    Function {textfont(Font* f)} {return_type void
    } {
      code {fileList->textfont(f);} {}
    }
    Function {textfont()} {return_type {Font*}
    } {
      code {return (fileList->textfont());} {}
    }
    Function {textsize(float s)} {return_type void
    } {
      code {fileList->textsize(s);} {}
    }
    Function {textsize()} {return_type float
    } {
      code {return (fileList->textsize());} {}
    }
    Function {type(int t)} {return_type void
    } {
      code {type_ = t;
if (t & MULTI)
  fileList->type(Browser::MULTI);
else
  fileList->type(Browser::NORMAL);
if (t & CREATE)
  newButton->activate();
else
  newButton->deactivate();
if (t & DIRECTORY)
  fileList->filetype(FileBrowser::DIRECTORIES);
else
  fileList->filetype(FileBrowser::FILES);} {}
    }
    Function {type()} {return_type int
    } {
      code {return (type_);} {}
    }
    Function {user_data() const} {return_type {void *}
    } {
      code {return (data_);} {}
    }
    Function {user_data(void *d)} {return_type void
    } {
      code {data_ = d;} {}
    }
    decl {const char *value(int f = 1);} {public
    }
    decl {void value(const char *filename);} {public
    }
    Function {visible()} {return_type int
    } {
      code {return window->visible();} {}
    }
    Function {favorites(int e)} {return_type void
    } {
      code {favorites_showing = e;
update_favorites();} {}
    }
    Function {favorites() const} {return_type int 
    } {
      code {return favorites_showing;} {}
    }
    decl {static const char *add_favorites_label;} {public
    }
    decl {static const char *all_files_label;} {public
    }
    decl {static const char *custom_filter_label;} {public
    }
    decl {static const char *existing_file_label;} {public
    }
    decl {static const char *favorites_label;} {public
    }
    decl {static const char *filename_label;} {public
    }
    decl {static const char *filesystems_label;} {public
    }
    decl {static const char *manage_favorites_label;} {public
    }
    decl {static const char *new_directory_label;} {public
    }
    decl {static const char *new_directory_tooltip;} {public
    }
    decl {static const char *preview_label;} {public
    }
    decl {static const char *save_label;} {public
    }
    decl {static const char *show_label;} {public
    }
    decl {static File_Sort_F *sort;} {public
    }
  }
  decl {FL_API void file_chooser_ok_label(const char*l);} {public
  }
} 

comment {//
// End of "$Id: FileChooser.fl 6074 2008-03-20 16:32:46Z fabien $".
//} {in_source in_header
} 
